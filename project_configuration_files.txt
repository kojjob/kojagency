# .env.example
# Copy this file to .env and update with your actual values

# Rails Configuration
RAILS_ENV=development
SECRET_KEY_BASE=your_secret_key_base_here
RAILS_MASTER_KEY=your_rails_master_key_here

# Database Configuration
DATABASE_URL=postgresql://username:password@localhost:5432/agency_development
REDIS_URL=redis://localhost:6379/0

# Email Configuration (Development)
SMTP_HOST=localhost
SMTP_PORT=1025
SMTP_USERNAME=
SMTP_PASSWORD=

# Email Configuration (Production)
# SMTP_HOST=smtp.your-provider.com
# SMTP_PORT=587
# SMTP_USERNAME=your_smtp_username
# SMTP_PASSWORD=your_smtp_password

# CRM Integration
HUBSPOT_ACCESS_TOKEN=your_hubspot_access_token
SALESFORCE_CLIENT_ID=your_salesforce_client_id
SALESFORCE_CLIENT_SECRET=your_salesforce_client_secret
SALESFORCE_USERNAME=your_salesforce_username
SALESFORCE_PASSWORD=your_salesforce_password
SALESFORCE_SECURITY_TOKEN=your_salesforce_security_token

# Analytics & Tracking
GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX
GOOGLE_TAG_MANAGER_ID=GTM-XXXXXXX
HOTJAR_ID=your_hotjar_id

# File Storage (Production)
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_REGION=us-east-1
AWS_BUCKET=your-s3-bucket-name

# Performance Monitoring
NEW_RELIC_LICENSE_KEY=your_new_relic_license_key
SENTRY_DSN=your_sentry_dsn

# Application Settings
APP_DOMAIN=yourcompany.com
ADMIN_EMAIL=admin@yourcompany.com
SUPPORT_EMAIL=support@yourcompany.com

# Rate Limiting
RACK_ATTACK_ENABLED=true
CONTACT_FORM_LIMIT=5  # per hour per IP
API_RATE_LIMIT=100    # per hour per IP

# Background Jobs
SIDEKIQ_CONCURRENCY=10
SIDEKIQ_QUEUES=critical,default,low

# Security
SESSION_TIMEOUT=7200  # 2 hours in seconds
FORCE_SSL=true        # Enable in production

---

# package.json
{
  "name": "digital-agency-platform",
  "version": "1.0.0",
  "description": "Digital agency showcase platform for lead generation and client acquisition",
  "main": "app/javascript/application.js",
  "scripts": {
    "build": "webpack --mode=production",
    "build:dev": "webpack --mode=development",
    "watch": "webpack --mode=development --watch",
    "watch:css": "tailwindcss -i ./app/assets/stylesheets/application.tailwind.css -o ./app/assets/builds/application.css --watch",
    "build:css": "tailwindcss -i ./app/assets/stylesheets/application.tailwind.css -o ./app/assets/builds/application.css --minify",
    "test:js": "jest",
    "lint:js": "eslint app/javascript",
    "lint:css": "stylelint app/assets/stylesheets",
    "format": "prettier --write app/javascript"
  },
  "dependencies": {
    "@hotwired/stimulus": "^3.2.2",
    "@hotwired/turbo-rails": "^8.0.0",
    "tailwindcss": "^3.4.0",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.32"
  },
  "devDependencies": {
    "@tailwindcss/forms": "^0.5.7",
    "@tailwindcss/typography": "^0.5.10",
    "eslint": "^8.55.0",
    "eslint-config-standard": "^17.1.0",
    "jest": "^29.7.0",
    "prettier": "^3.1.0",
    "stylelint": "^15.11.0",
    "stylelint-config-standard": "^34.0.0",
    "webpack": "^5.89.0",
    "webpack-cli": "^5.1.4"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "keywords": [
    "digital-agency",
    "rails",
    "lead-generation",
    "portfolio",
    "crm-integration"
  ],
  "author": "Your Digital Agency",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/your-org/agency-platform.git"
  },
  "bugs": {
    "url": "https://github.com/your-org/agency-platform/issues"
  },
  "homepage": "https://github.com/your-org/agency-platform#readme"
}

---

# tailwind.config.js
const defaultTheme = require('tailwindcss/defaultTheme')

module.exports = {
  content: [
    './public/*.html',
    './app/helpers/**/*.rb',
    './app/javascript/**/*.js',
    './app/views/**/*.{erb,haml,html,slim}'
  ],
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter var', ...defaultTheme.fontFamily.sans],
      },
      colors: {
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
        },
        secondary: {
          50: '#ecfdf5',
          100: '#d1fae5',
          200: '#a7f3d0',
          300: '#6ee7b7',
          400: '#34d399',
          500: '#10b981',
          600: '#059669',
          700: '#047857',
          800: '#065f46',
          900: '#064e3b',
        }
      },
      animation: {
        'fade-in': 'fadeIn 0.8s ease-in-out',
        'slide-up': 'slideUp 0.6s ease-out',
        'float': 'float 6s ease-in-out infinite',
        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0', transform: 'translateY(20px)' },
          '100%': { opacity: '1', transform: 'translateY(0)' }
        },
        slideUp: {
          '0%': { opacity: '0', transform: 'translateY(40px)' },
          '100%': { opacity: '1', transform: 'translateY(0)' }
        },
        float: {
          '0%, 100%': { transform: 'translateY(0px)' },
          '50%': { transform: 'translateY(-20px)' }
        }
      },
      typography: (theme) => ({
        DEFAULT: {
          css: {
            color: theme('colors.gray.700'),
            lineHeight: '1.75',
          },
        },
      }),
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
    require('@tailwindcss/aspect-ratio'),
  ]
}

---

# .eslintrc.js
module.exports = {
  env: {
    browser: true,
    es2021: true,
    node: true,
    jest: true
  },
  extends: [
    'standard'
  ],
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module'
  },
  rules: {
    'no-console': 'warn',
    'no-unused-vars': 'error',
    'prefer-const': 'error',
    'no-var': 'error'
  },
  globals: {
    Stimulus: 'readonly',
    Turbo: 'readonly'
  }
}

---

# .stylelintrc.json
{
  "extends": [
    "stylelint-config-standard"
  ],
  "rules": {
    "at-rule-no-unknown": [
      true,
      {
        "ignoreAtRules": [
          "tailwind",
          "apply",
          "variants",
          "responsive",
          "screen",
          "layer"
        ]
      }
    ],
    "declaration-block-trailing-semicolon": null,
    "no-descending-specificity": null
  }
}

---

# Procfile (for deployment)
web: bundle exec puma -C config/puma.rb
worker: bundle exec sidekiq
release: bundle exec rails db:migrate

---

# Procfile.dev (for local development)
web: bundle exec rails server -p 3000
js: npm run watch
css: npm run watch:css
worker: bundle exec sidekiq
mailcatcher: mailcatcher --foreground --http-ip=0.0.0.0

---

# .gitignore
# Dependencies
node_modules/
vendor/bundle

# Rails generated files
.bundle
db/*.sqlite3
db/*.sqlite3-journal
db/*.sqlite3-[0-9]*
log/*
tmp/*
storage/*

# Environment variables
.env
.env.local
.env.production

# Editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Test coverage
coverage/
.nyc_output/

# Assets
/app/assets/builds/*
!/app/assets/builds/.keep
public/assets
public/packs
public/packs-test

# Uploads
public/uploads

# Compiled assets
tmp/cache/assets/

# Master key
config/master.key
config/credentials/*.key

# Elastic Beanstalk Files
.elasticbeanstalk/*
!.elasticbeanstalk/*.cfg.yml
!.elasticbeanstalk/*.global.yml

---

# bin/setup - Project initialization script
#!/usr/bin/env ruby
require "fileutils"

# Path to your application root
APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args, exception: true)
end

FileUtils.chdir APP_ROOT do
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  puts "== Installing dependencies =="
  system! "gem install bundler --conservative"
  system("bundle check") || system!("bundle install")
  system("npm --version") || abort("Node.js is required")
  system!("npm install")

  puts "\n== Preparing database =="
  system! "bin/rails db:prepare"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  puts "\n== Setting up environment =="
  unless File.exist?(".env")
    puts "Copying .env.example to .env..."
    system! "cp .env.example .env"
    puts "Please edit .env with your configuration"
  end

  puts "\n== Seeding database =="
  system! "bin/rails db:seed"

  puts "\n== Precompiling assets for development =="
  system! "bin/rails assets:precompile"

  puts "\n== Running tests to verify setup =="
  system! "bin/rails test:prepare"
  system! "bundle exec rspec --format progress"

  puts "\n== Project setup complete! =="
  puts ""
  puts "To start the application:"
  puts "  bin/dev                    # Start all services with Procfile.dev"
  puts "  # OR"
  puts "  bin/rails server           # Just the Rails server"
  puts ""
  puts "Then visit: http://localhost:3000"
  puts ""
  puts "Admin panel: http://localhost:3000/admin"
  puts "Health check: http://localhost:3000/health"
end

---

# bin/dev - Development script
#!/usr/bin/env sh

if ! gem list --silent foreman | grep foreman > /dev/null; then
  echo "Installing foreman..."
  gem install foreman
fi

# Use Procfile.dev for local development
exec foreman start -f Procfile.dev "$@"

---

# config/database.yml
default: &default
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch("DB_POOL") { 10 } %>
  timeout: 5000
  host: <%= ENV.fetch("DB_HOST") { "localhost" } %>
  port: <%= ENV.fetch("DB_PORT") { 5432 } %>

development:
  <<: *default
  database: <%= ENV.fetch("DB_NAME") { "agency_development" } %>
  username: <%= ENV.fetch("DB_USERNAME") { "postgres" } %>
  password: <%= ENV.fetch("DB_PASSWORD") { "" } %>

test:
  <<: *default
  database: <%= ENV.fetch("DB_NAME_TEST") { "agency_test" } %>
  username: <%= ENV.fetch("DB_USERNAME") { "postgres" } %>
  password: <%= ENV.fetch("DB_PASSWORD") { "" } %>

production:
  <<: *default
  url: <%= ENV['DATABASE_URL'] %>
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

---

# config/puma.rb
max_threads_count = ENV.fetch("RAILS_MAX_THREADS") { 5 }
min_threads_count = ENV.fetch("RAILS_MIN_THREADS") { max_threads_count }
threads min_threads_count, max_threads_count

worker_timeout 3600 if ENV.fetch("RAILS_ENV", "development") == "development"

port ENV.fetch("PORT") { 3000 }
environment ENV.fetch("RAILS_ENV") { "development" }
pidfile ENV.fetch("PIDFILE") { "tmp/pids/server.pid" }

workers ENV.fetch("WEB_CONCURRENCY") { 2 } if ENV["RAILS_ENV"] == "production"

preload_app! if ENV["RAILS_ENV"] == "production"

plugin :tmp_restart

---

# lib/tasks/project.rake
namespace :project do
  desc "Setup project for first-time development"
  task :setup do
    puts "🚀 Setting up Digital Agency Platform..."
    
    # Environment check
    Rake::Task['project:check_dependencies'].invoke
    
    # Database setup
    Rake::Task['db:create'].invoke
    Rake::Task['db:migrate'].invoke
    Rake::Task['db:seed'].invoke
    
    # Asset compilation
    system("npm install")
    Rake::Task['assets:precompile'].invoke
    
    # Run tests
    system("bundle exec rspec")
    
    puts "✅ Project setup complete!"
    puts "Start the server with: bin/dev"
  end

  desc "Check system dependencies"
  task :check_dependencies do
    puts "🔍 Checking system dependencies..."
    
    # Check Ruby version
    required_ruby = "3.2.0"
    current_ruby = RUBY_VERSION
    
    if Gem::Version.new(current_ruby) < Gem::Version.new(required_ruby)
      puts "❌ Ruby #{required_ruby} or higher required. Current: #{current_ruby}"
      exit 1
    end
    
    # Check Node.js
    node_version = `node --version 2>/dev/null`.strip
    if node_version.empty?
      puts "❌ Node.js is required but not installed"
      exit 1
    end
    
    # Check PostgreSQL
    pg_version = `psql --version 2>/dev/null`.strip
    if pg_version.empty?
      puts "❌ PostgreSQL is required but not installed"
      exit 1
    end
    
    # Check Redis
    redis_version = `redis-server --version 2>/dev/null`.strip
    if redis_version.empty?
      puts "❌ Redis is required but not installed"
      exit 1
    end
    
    puts "✅ All dependencies satisfied"
  end

  desc "Generate sample data for development"
  task :sample_data => :environment do
    puts "📊 Generating sample data..."
    
    # Create sample clients
    tech_client = Client.find_or_create_by(name: "TechFlow Solutions") do |client|
      client.industry = "SaaS"
      client.company_size = "growth"
      client.website = "https://techflow.example.com"
      client.description = "B2B workflow automation platform"
    end
    
    retail_client = Client.find_or_create_by(name: "RetailMax Inc") do |client|
      client.industry = "E-commerce"
      client.company_size = "midmarket"
      client.website = "https://retailmax.example.com"
      client.description = "Multi-brand retail management platform"
    end
    
    # Create services
    web_service = Service.find_or_create_by(name: "Web Development") do |service|
      service.description = "Custom web applications built with modern frameworks"
      service.category = "web"
      service.featured = true
      service.base_price = 15000
    end
    
    mobile_service = Service.find_or_create_by(name: "Mobile Development") do |service|
      service.description = "Native iOS and Android applications"
      service.category = "mobile"
      service.featured = true
      service.base_price = 25000
    end
    
    # Create technologies
    rails = Technology.find_or_create_by(name: "Ruby on Rails") do |tech|
      tech.category = "backend"
      tech.proficiency_level = "expert"
      tech.color_hex = "#CC0000"
    end
    
    react = Technology.find_or_create_by(name: "React") do |tech|
      tech.category = "frontend"
      tech.proficiency_level = "expert"
      tech.color_hex = "#61DAFB"
    end
    
    # Create sample projects
    project1 = Project.find_or_create_by(title: "TechFlow Dashboard Redesign") do |project|
      project.description = "Complete overhaul of analytics dashboard with real-time data visualization"
      project.challenge = "Legacy dashboard was slow and provided limited insights."
      project.solution = "Built modern Rails 8 application with Hotwire for real-time updates."
      project.results = "Improved user engagement by 180% and reduced load times by 75%."
      project.status = "featured"
      project.budget_range = "large"
      project.duration_months = 8
      project.team_size = 4
      project.client = tech_client
      project.featured = true
      project.completed_at = 3.months.ago
    end
    
    project1.services << [web_service] unless project1.services.include?(web_service)
    project1.technologies << [rails, react] unless project1.technologies.include?(rails)
    
    # Create metrics
    ProjectMetric.find_or_create_by(project: project1, metric_name: "Page Load Time") do |metric|
      metric.before_value = 4.2
      metric.after_value = 1.1
      metric.unit = "seconds"
      metric.metric_type = "performance"
    end
    
    # Create testimonial
    Testimonial.find_or_create_by(client: tech_client, project: project1) do |testimonial|
      testimonial.content = "The team delivered exactly what we needed. The new dashboard is intuitive, fast, and our users love it."
      testimonial.author_name = "Sarah Johnson"
      testimonial.author_title = "CTO"
      testimonial.rating = 5
      testimonial.status = "published"
    end
    
    # Create sample leads
    5.times do |i|
      Lead.create!(
        name: "Sample Lead #{i + 1}",
        email: "lead#{i + 1}@example.com",
        company: "Company #{i + 1}",
        project_type: ["web", "mobile", "data"].sample,
        budget_range: ["medium", "large", "enterprise"].sample,
        timeline: ["month", "quarter"].sample,
        message: "We're interested in discussing our upcoming project requirements.",
        lead_score: rand(40..95)
      )
    end
    
    puts "✅ Sample data generated successfully!"
    puts "Projects: #{Project.count}"
    puts "Clients: #{Client.count}"
    puts "Leads: #{Lead.count}"
  end

  desc "Reset and regenerate all sample data"
  task :reset_data => :environment do
    puts "🗑️  Resetting database..."
    
    Rake::Task['db:drop'].invoke
    Rake::Task['db:create'].invoke
    Rake::Task['db:migrate'].invoke
    Rake::Task['project:sample_data'].invoke
    
    puts "✅ Database reset complete!"
  end

  desc "Run comprehensive health check"
  task :health_check => :environment do
    puts "🏥 Running health check..."
    
    checks = []
    
    # Database connectivity
    begin
      ActiveRecord::Base.connection.execute('SELECT 1')
      checks << { name: "Database", status: "✅ Connected", details: "PostgreSQL connection OK" }
    rescue => e
      checks << { name: "Database", status: "❌ Failed", details: e.message }
    end
    
    # Redis connectivity
    begin
      Redis.new(url: ENV.fetch('REDIS_URL', 'redis://localhost:6379/0')).ping
      checks << { name: "Redis", status: "✅ Connected", details: "Redis connection OK" }
    rescue => e
      checks << { name: "Redis", status: "❌ Failed", details: e.message }
    end
    
    # Required environment variables
    required_env = %w[SECRET_KEY_BASE DATABASE_URL]
    missing_env = required_env.select { |var| ENV[var].blank? }
    
    if missing_env.empty?
      checks << { name: "Environment", status: "✅ OK", details: "All required variables present" }
    else
      checks << { name: "Environment", status: "❌ Missing", details: "Missing: #{missing_env.join(', ')}" }
    end
    
    # Print results
    puts "\n📊 Health Check Results:"
    puts "=" * 50
    checks.each do |check|
      puts "#{check[:name].ljust(20)} #{check[:status]}"
      puts "#{' ' * 20} #{check[:details]}"
    end
    puts "=" * 50
    
    # Overall status
    failed_checks = checks.count { |check| check[:status].include?("❌") }
    if failed_checks.zero?
      puts "🎉 All systems operational!"
    else
      puts "⚠️  #{failed_checks} issue(s) found"
    end
  end
end

---

# VERSION
1.0.0

---

# CHANGELOG.md
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Planned
- Advanced analytics dashboard
- A/B testing framework
- Multi-language support
- Advanced CRM integrations

## [1.0.0] - 2024-01-15

### Added
- Initial platform release
- Complete project showcase system
- AI-powered lead scoring algorithm
- HubSpot and Salesforce CRM integration
- Responsive design with TailwindCSS
- Comprehensive test suite with RSpec
- Docker deployment configuration
- Performance monitoring and health checks
- SEO optimization with structured data
- Admin panel for content management
- Email automation workflows
- Security hardening (SSL, rate limiting, headers)

### Technical Highlights
- Ruby on Rails 8.0 with modern conventions
- Test-Driven Development with 90%+ coverage
- Domain-Driven Design architecture
- Hotwire for dynamic interactions
- PostgreSQL with Redis caching
- Sidekiq for background job processing

### Business Features
- Lead generation and conversion optimization
- Professional portfolio showcase
- Client testimonial management
- Service offering presentations
- Business metrics tracking
- Automated follow-up systems

[Unreleased]: https://github.com/your-org/agency-platform/compare/v1.0.0...HEAD
[1.0.0]: https://github.com/your-org/agency-platform/releases/tag/v1.0.0